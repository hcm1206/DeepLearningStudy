# 행렬의 곱은 첫번째 행렬의 행과 두번째 행렬의 열을 원소 별로 곱하여 그 값들을 더하여 계산
# [[A,B],[C,D]] × [[E,F],[G,H]] = [[(A×E+B×G),(C×E+D×G)],[(A×F+B×H),(C×F+D×H)]]

import numpy as np

# 2×2 행렬과 2×2 행렬의 행렬 곱

# A에 2×2 행렬 저장
A = np.array([[1,2],[3,4]])
print(A.shape)
# B에 2×2 행렬 저장
B = np.array([[5,6],[7,8]])
print(B.shape)
# A와 B의 행렬의 곱을 계산하여 출력
print(np.dot(A,B))

# 행렬의 곱은 계산 순서가 다르면 결과 값이 달라짐

print()

# 형상이 다른 행렬도 조건을 만족하면 행렬곱 계산 가능
# 행렬곱 계산 가능한 조건 : 첫번째 행렬의 열의 수(1번째 차원의 원소 수)와 두번째 행렬의 행의 수(0번째 차원의 원소 수)가 같아야 함

# A에 3×2 행렬 저장
A = np.array([[1,2,3],[4,5,6]])
print(A.shape)
# B에 2×3 행렬 저장
B = np.array([[1,2],[3,4],[5,6]])
print(B.shape)
# A와 B의 행렬의 곱을 계산하여 출력
print(np.dot(A,B))

print()


# 행렬의 형상이 조건을 만족하지 않으면 (첫번째 형열의 열의 수 != 두번째 행렬의 행의 수) 행렬곱 불가

# C에 2×2 행렬 저장
C = np.array([[1,2],[3,4]])
print(C.shape)
print(A.shape)

# 아래의 경우 2×3 행렬(A)과 2×2 행렬(C)은 행렬곱 계산 불가 (A의 행의 수(3) != C의 행의 수(2))
# print(np.dot(A,C))

# 아래의 경우 2×2 행렬(C)과 2×3 행렬(A)은 행렬곱 계산 가능 (A의 열의 수(2) == C의 행의 수(2))
print(np.dot(C,A))

print()

# 행열곱의 결과는 (첫번째 행렬의 행 × 두번째 행렬의 열) 형상의 행렬로 나타남
# 3×2 행렬과 2×4 행렬은 첫번째 행렬의 열(2)과 두번째 행렬의 행(2)가 같으므로 행렬곱이 가능하고 행렬곱은 (첫번째 행렬의 행(3) × 두번째 행렬의 열(4)) 형상으로 나타남

# 2차원 행렬과 1차원 배열의 곱도 대응하는 차원의 원소 수가 같아야 함

# 2차원 행렬과 1차원 배열의 행렬곱의 예시

# A에 3×2 행렬 저장
A = np.array([[1,2],[3,4],[5,6]])
print(A.shape)
# B에 2 크기의 1차원 배열 저장
B = np.array([7,8])
print(B.shape)
# A와 B의 행렬곱 출력 (A의 열(2) == B의 배열 크기(2)이므로 행렬곱 가능)
print(np.dot(A,B))

print()


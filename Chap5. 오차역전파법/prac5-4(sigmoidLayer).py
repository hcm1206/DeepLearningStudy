# 시그모이드 함수 수식
# y = 1/(1+exp(-x))
# 이를 계층으로 세분화하면 다음과 같음
# 1. x와 -1을 곱하는 곱셈 계층
# 2. 1의 순전파 계산 결과(-x)를 자연상수 계산을 하는 exp 계층
# 3. 2의 순전파 계산 결과(exp(-x))에 1을 더하는 덧셈 계층
# 4. 1을 3의 순전파 계산 결과(1+exp(-x))로 나누는 나눗셈 계층

# 1단계 나눗셈 계층, y = 1/x의 미분값은 -1/x**2 => -y**2 * dout
# 1단계 계층의 역전파 계산은 상류에서 흘러온 미분값에 (순전파 출력값을 제곱하여 마이너스를 붙인 값)을 곱하여 하류로 전달

# 2단계 덧셈 계층, y = x + 1의 미분 값은 1 * dout
# 2단계 계층의 역전파 계산은 상류에서 흘러온 미분값을 그대로 하류로 전달

# 3단계 exp 계층, y = exp(x)의 미분 값은 exp(x) * dout
# 3단계 계층의 역전파 계산은 상류에서 흘러온 미분값에 순전파 출력값(exp(-x))을 곱하여 하류로 전달

# 4단계 곱셈 계층, y = x * -1의 (x에서의) 미분값은 -x * dout
# 4단계 계층의 역전파 계산은 상류에서 흘러온 미분값에 해당 입력값과 다른 입력값을 곱하여 해당 입력값 방향 하류로 전달

# 최종 역전파 출력값은 (순방향 최종 출력 미분값)*y**2*exp(-x) : 순전파의 입력값(x)과 출력값(y)만으로 최종 미분값 도출 가능
# 중간 과정을 모두 생략하고 상기 식만 이용하여 Sigmoid 노드 하나로 대체 가능

# 위 식을 정리하면
# (순방향 최종 출력 미분값)*y**2*exp(-x) = (순방향 최종 출력 미분값)*(1/((1+exp(-x))**2))*exp(-x)
# = (순방향 최종 출력 미분값)*1/(1+exp(-x))*exp(-x)/(1+exp(-x)) = (순방향 최종 출력 미분값)*y*(1-y)
# 로 단순화 가능 : Sigmoid 계층의 역전파는 순전파 출력(y) 하나로 계산 가능

# 시그모이드 계층 구현

import numpy as np

class Sigmoid:
    def __init__(self):
        # 순전파 출력값을 저장할 변수 생성
        self.out = None

    # 순전파 계산 : 입력받은 값을 시그모이드 함수 계산을 하여 결과 값을 클래스 변수에 따로 저장하고 결과 값 출력
    def forward(self,x):
        out = 1/(1+np.exp(-x))
        self.out = out
        return out

    # 역전파 계산 : 입력받은 상류 미분값을 클래스 변수로 저장된 순전파 결과 값을 이용하여 계산 후 결과 리턴
    def backward(self,dout):
        dx = dout*self.out*(1.0-self.out)
        return dx